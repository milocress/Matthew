a = 2 + 3


def f(x):
    return x*x

l = [1,3,5,6]

modified_list = [x * 0.15 for x in l]

# modified_list = [x * 0.15 for x in [1,3,5,6]]

# modified_list = [1 * 0.15, 3 * 0.15 ...]

def map (fun, lis):
    return [fun(x) for x in lis]

# Python 3.6.7 (default, Oct 22 2018, 11:32:17) 
# [GCC 8.2.0] on linux
# Type "help", "copyright", "credits" or "license" for more information.
# >>> def map (fun, lis):
# ...     return [fun(x) for x in lis]
# ... 
# >>> def f(x):
# ...     return x*5
# ... 
# >>> map (f, [3,5,9,16])
# [15, 25, 45, 80]

# Logs
# Python 3.6.7 (default, Oct 22 2018, 11:32:17) 
# [GCC 8.2.0] on linux
# Type "help", "copyright", "credits" or "license" for more information.
# >>> 9+3
# 12
# >>> a=5
# >>> a+3
# 8
# >>> a=2+3
# >>> b=3-2
# >>> a+b
# 6
# >>> def f(x):
# ...     return x*x
# ... 
# >>> f(8)
# 64
# >>> f(f(8))
# 4096
# >>> l = [12, 23, 45, 66]
# >>> [x * 0.15 for x in l]
# [1.7999999999999998, 3.4499999999999997, 6.75, 9.9]
# >>> def map (fun, lis):
# ...     return [fun(x) for x in lis]
# ... 
# >>> map
# <function map at 0x7f1610652c80>
# >>> g(x) = x * 8
#   File "<stdin>", line 1
# SyntaxError: can't assign to function call
# >>> def g(x):
# ...     return x * 8
# ... 
# >>> map (g, [3,6,9])
# [24, 48, 72]

# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

# Find the sum of all the multiples of 3 or 5 below 1000.

def filter (fun, lis):
    return [x for x in lis if fun(x)]

# Python 3.6.7 (default, Oct 22 2018, 11:32:17) 
# [GCC 8.2.0] on linux
# Type "help", "copyright", "credits" or "license" for more information.
# >>> def map (fun, lis):
# ...     return [fun(x) for x in lis]
# ... 
# >>> def f(x):
# ...     return x*5
# ... 
# >>> map (f, [3,5,9,16])
# [15, 25, 45, 80]
# >>> range(5)
# range(0, 5)
# >>> range(5).toList()
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# AttributeError: 'range' object has no attribute 'toList'
# >>> range(5)
# range(0, 5)
# >>> xrange(5)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'xrange' is not defined
# >>> list(range(5))
# [0, 1, 2, 3, 4]
# >>> True
# True
# >>> False
# False
# >>> 1
# 1
# >>> 2
# 2
# >>> 2 == 3
# False
# >>> 2 != 3
# True
# >>> sum(list(range(100))
# ... 
# ... )
# 4950
# >>> mod(2,3)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'mod' is not defined
# >>> def f(x):
# ...     return (x%3==0)or (x%5==0)
# ... 
# >>> f(12)
# True
# >>> f(15)
# True
# >>> f(14)
# False
# >>> 
# >>> lis = (range(1000))
# >>> 
# >>> def filter = (f, lis):
#   File "<stdin>", line 1
#     def filter = (f, lis):
#                ^
# SyntaxError: invalid syntax
# >>> def filter (fun, lis):
# ...     return [x for x in lis if fun(x)==True]
# ... 
# >>> filter (f, lis)
# (Snipped for length)
# >>> sum(filter(f, lis))
# 233168



# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# fib (0) == 1
# fib (1) == 1
# fib (n) == fib (n - 1) + fib (n - 2)

fibs = []
fibs.append(1)
# fibs.append(2)

i = 2
maxNum = 2
while maxNum < 4000000:
    fibs.append(maxNum)
    maxNum = fibs[i - 1] + fibs[i - 2]
    i = i + 1

def is_even(x):
    return(x%2==0)

print(sum(filter (is_even, fibs)))

print(fibs)



# The prime factors of 13195 are 5, 7, 13 and 29.

# What is the largest prime factor of the number 60085147514

